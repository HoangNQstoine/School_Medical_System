import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { User, Heart, Edit, ShieldCheck, AlertCircle, FileText, Briefcase as BriefcaseMedical, Droplets, Activity } from 'lucide-react';
import { toast } from '@/components/ui/use-toast';
import { Badge } from '@/components/ui/badge';

const mockStudentProfile = {
  id: 'student001',
  name: 'Nguy·ªÖn VƒÉn Nam',
  dob: '2008-07-15',
  gender: 'Nam',
  class: '10A1',
  studentId: 'HS00123',
  address: '123 ƒê∆∞·ªùng ABC, Ph∆∞·ªùng XYZ, Qu·∫≠n 1, TP. HCM',
  phone: '090xxxxxxx',
  email: 'nam.nguyen@example.com',
  fatherName: 'Nguy·ªÖn VƒÉn Ba',
  fatherPhone: '091xxxxxxx',
  motherName: 'Tr·∫ßn Th·ªã T∆∞',
  motherPhone: '098xxxxxxx',
  bloodGroup: 'O+',
  allergies: ['H·∫£i s·∫£n', 'B·ª•i m·ªãn'],
  chronicDiseases: ['Hen suy·ªÖn (nh·∫π)'],
  emergencyContact: {
    name: 'Nguy·ªÖn VƒÉn Ba (B·ªë)',
    phone: '091xxxxxxx',
    relationship: 'B·ªë',
  },
  insurance: {
    provider: 'B·∫£o Vi·ªát',
    policyNumber: 'BVHS123456789',
    expiryDate: '2025-12-31',
  },
  lastHealthCheck: '2025-03-10',
  notes: 'C·∫ßn mang theo ·ªëng h√≠t Ventolin khi v·∫≠n ƒë·ªông m·∫°nh.'
};

const InfoItem = ({ label, value, icon }) => (
  <div className="flex items-start py-2 border-b border-gray-100 last:border-b-0">
    {icon && <div className="w-6 h-6 mr-3 text-gray-500 flex-shrink-0">{icon}</div>}
    <div className="flex-1">
      <p className="text-xs text-gray-500">{label}</p>
      <p className="text-sm font-medium text-gray-800">{value || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
    </div>
  </div>
);

const StudentHealthProfile = () => {
  const [profile, setProfile] = useState(mockStudentProfile);

  const calculateAge = (dob) => {
    const birthDate = new Date(dob);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const m = today.getMonth() - birthDate.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }
    return age;
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="space-y-6"
    >
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">H·ªì s∆° s·ª©c kh·ªèe c·ªßa t√¥i</h1>
          <p className="text-gray-600 mt-2">Th√¥ng tin chi ti·∫øt v·ªÅ s·ª©c kh·ªèe v√† ti·ªÅn s·ª≠ b·ªánh.</p>
        </div>
        <Button variant="outline" onClick={() => toast({ title: "üöß T√≠nh nƒÉng ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai", description: "Ch·ª©c nƒÉng ch·ªânh s·ª≠a th√¥ng tin s·∫Ω s·ªõm ƒë∆∞·ª£c c·∫≠p nh·∫≠t! üöÄ" })}>
          <Edit className="w-4 h-4 mr-2" />
          Ch·ªânh s·ª≠a th√¥ng tin
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2 card-hover">
          <CardHeader>
            <CardTitle className="flex items-center">
              <User className="w-5 h-5 mr-2 text-blue-600" />
              Th√¥ng tin c√° nh√¢n
            </CardTitle>
            <CardDescription>M√£ h·ªçc sinh: {profile.studentId}</CardDescription>
          </CardHeader>
          <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-2">
            <InfoItem label="H·ªç v√† t√™n" value={profile.name} />
            <InfoItem label="Ng√†y sinh" value={`${profile.dob} (${calculateAge(profile.dob)} tu·ªïi)`} />
            <InfoItem label="Gi·ªõi t√≠nh" value={profile.gender} />
            <InfoItem label="L·ªõp" value={profile.class} />
            <InfoItem label="ƒê·ªãa ch·ªâ" value={profile.address} />
            <InfoItem label="S·ªë ƒëi·ªán tho·∫°i" value={profile.phone} />
            <InfoItem label="Email" value={profile.email} />
            <InfoItem label="H·ªç t√™n cha" value={profile.fatherName} />
            <InfoItem label="SƒêT cha" value={profile.fatherPhone} />
            <InfoItem label="H·ªç t√™n m·∫π" value={profile.motherName} />
            <InfoItem label="SƒêT m·∫π" value={profile.motherPhone} />
          </CardContent>
        </Card>

        <div className="space-y-6">
          <Card className="card-hover">
            <CardHeader>
              <CardTitle className="flex items-center">
                <Heart className="w-5 h-5 mr-2 text-red-600" />
                Th√¥ng tin y t·∫ø
              </CardTitle>
            </CardHeader>
            <CardContent>
              <InfoItem label="Nh√≥m m√°u" value={profile.bloodGroup} icon={<Droplets size={18}/>} />
              <InfoItem label="D·ªã ·ª©ng" value={profile.allergies.join(', ') || 'Kh√¥ng c√≥'} icon={<AlertCircle size={18}/>} />
              <InfoItem label="B·ªánh m√£n t√≠nh" value={profile.chronicDiseases.join(', ') || 'Kh√¥ng c√≥'} icon={<BriefcaseMedical size={18}/>} />
              <InfoItem label="L·∫ßn kh√°m g·∫ßn nh·∫•t" value={profile.lastHealthCheck} icon={<Activity size={18}/>} />
            </CardContent>
          </Card>

          <Card className="card-hover">
            <CardHeader>
              <CardTitle className="flex items-center">
                <ShieldCheck className="w-5 h-5 mr-2 text-green-600" />
                B·∫£o hi·ªÉm y t·∫ø
              </CardTitle>
            </CardHeader>
            <CardContent>
              <InfoItem label="Nh√† cung c·∫•p" value={profile.insurance.provider} />
              <InfoItem label="S·ªë h·ª£p ƒë·ªìng" value={profile.insurance.policyNumber} />
              <InfoItem label="Ng√†y h·∫øt h·∫°n" value={profile.insurance.expiryDate} />
              <Button size="sm" className="mt-3 w-full" variant="outline" onClick={() => toast({ title: "üöß T√≠nh nƒÉng ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai", description: "B·∫°n c√≥ th·ªÉ y√™u c·∫ßu t√≠nh nƒÉng n√†y ·ªü l·∫ßn nh·∫Øc ti·∫øp theo! üöÄ" })}>Xem chi ti·∫øt BHYT</Button>
            </CardContent>
          </Card>
          
          <Card className="card-hover bg-yellow-50 border-yellow-200">
            <CardHeader>
              <CardTitle className="flex items-center text-yellow-700">
                <AlertCircle className="w-5 h-5 mr-2" />
                Li√™n h·ªá kh·∫©n c·∫•p
              </CardTitle>
            </CardHeader>
            <CardContent>
              <InfoItem label="Ng∆∞·ªùi li√™n h·ªá" value={`${profile.emergencyContact.name} (${profile.emergencyContact.relationship})`} />
              <InfoItem label="S·ªë ƒëi·ªán tho·∫°i" value={profile.emergencyContact.phone} />
            </CardContent>
          </Card>
        </div>
      </div>
      
      <Card className="card-hover">
        <CardHeader>
          <CardTitle className="flex items-center">
            <FileText className="w-5 h-5 mr-2 text-indigo-600" />
            Ghi ch√∫ quan tr·ªçng
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-gray-700">{profile.notes || 'Kh√¥ng c√≥ ghi ch√∫ n√†o.'}</p>
        </CardContent>
      </Card>
    </motion.div>
  );
};

export default StudentHealthProfile;