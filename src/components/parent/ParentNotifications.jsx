import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { BellRing, MailCheck, Archive, Settings2, CalendarClock, AlertTriangle, Info, ChevronDown, ChevronUp } from 'lucide-react';
import { toast } from '@/components/ui/use-toast';
import { Badge } from '@/components/ui/badge';


const mockNotifications = [
  {
    id: 1,
    title: "Nh·∫Øc l·ªãch ti√™m ch·ªßng cho b√© Nguy·ªÖn VƒÉn An",
    description: "B√© An c√≥ l·ªãch ti√™m nh·∫Øc l·∫°i V·∫Øc-xin S·ªüi - Quai b·ªã - Rubella v√†o ng√†y 20/06/2025.",
    date: "2025-06-12",
    type: "vaccine",
    read: false,
    childName: "Nguy·ªÖn VƒÉn An",
  },
  {
    id: 2,
    title: "K·∫øt qu·∫£ kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ c·ªßa b√© Tr·∫ßn Th·ªã B√¨nh",
    description: "B√© B√¨nh ƒë√£ ho√†n th√†nh kh√°m s·ª©c kh·ªèe. K·∫øt qu·∫£ t·ªïng quan t·ªët, c·∫ßn b·ªï sung vitamin D.",
    date: "2025-06-10",
    type: "health_check",
    read: true,
    childName: "Tr·∫ßn Th·ªã B√¨nh",
  },
  {
    id: 3,
    title: "Th√¥ng b√°o ngh·ªâ h·ªçc ƒë·ªôt xu·∫•t",
    description: "Do s·ª± c·ªë m·∫•t ƒëi·ªán, to√†n tr∆∞·ªùng s·∫Ω ngh·ªâ h·ªçc ng√†y 15/06/2025. Ph·ª• huynh vui l√≤ng theo d√µi th√¥ng b√°o ti·∫øp theo.",
    date: "2025-06-14",
    type: "school_notice",
    read: false,
  },
  {
    id: 4,
    title: "C·∫£nh b√°o d·ªãch c√∫m m√πa",
    description: "Hi·ªán ƒëang c√≥ d·∫•u hi·ªáu gia tƒÉng c√°c ca c√∫m m√πa trong tr∆∞·ªùng. Ph·ª• huynh l∆∞u √Ω c√°c bi·ªán ph√°p ph√≤ng ng·ª´a cho con em.",
    date: "2025-06-05",
    type: "alert",
    read: true,
  },
];

const NotificationItem = ({ notification, onToggleRead, onArchive }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const getIcon = () => {
    switch (notification.type) {
      case 'vaccine': return <CalendarClock className="w-5 h-5 text-blue-500" />;
      case 'health_check': return <Info className="w-5 h-5 text-green-500" />;
      case 'school_notice': return <BellRing className="w-5 h-5 text-gray-500" />;
      case 'alert': return <AlertTriangle className="w-5 h-5 text-red-500" />;
      default: return <BellRing className="w-5 h-5 text-gray-500" />;
    }
  };

  return (
    <Card className={`transition-all duration-300 ${notification.read ? 'bg-gray-50 opacity-75' : 'bg-white hover:shadow-md'}`}>
      <CardHeader className="p-4">
        <div className="flex items-start justify-between">
          <div className="flex items-start space-x-3">
            <div className="mt-1">{getIcon()}</div>
            <div>
              <CardTitle className="text-md">{notification.title}</CardTitle>
              <CardDescription className="text-xs text-gray-500">
                {new Date(notification.date).toLocaleDateString('vi-VN')}
                {notification.childName && ` - Cho b√©: ${notification.childName}`}
              </CardDescription>
            </div>
          </div>
          <div className="flex items-center space-x-1">
            {!notification.read && <Badge variant="destructive" className="text-xs">M·ªõi</Badge>}
            <Button variant="ghost" size="icon" onClick={() => setIsExpanded(!isExpanded)}>
              {isExpanded ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
            </Button>
          </div>
        </div>
      </CardHeader>
      {isExpanded && (
        <motion.div
          initial={{ height: 0, opacity: 0 }}
          animate={{ height: 'auto', opacity: 1 }}
          exit={{ height: 0, opacity: 0 }}
          transition={{ duration: 0.2 }}
        >
          <CardContent className="p-4 pt-0">
            <p className="text-sm text-gray-700 mb-3">{notification.description}</p>
            <div className="flex gap-2">
              <Button size="sm" variant={notification.read ? "outline" : "default"} onClick={() => onToggleRead(notification.id)}>
                {notification.read ? 'ƒê√°nh d·∫•u ch∆∞a ƒë·ªçc' : 'ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc'}
              </Button>
              <Button size="sm" variant="outline" onClick={() => onArchive(notification.id)}>
                <Archive className="w-3 h-3 mr-1.5" /> L∆∞u tr·ªØ
              </Button>
            </div>
          </CardContent>
        </motion.div>
      )}
    </Card>
  );
};

const ParentNotifications = () => {
  const [notifications, setNotifications] = useState(mockNotifications);

  const toggleReadStatus = (id) => {
    setNotifications(
      notifications.map((n) =>
        n.id === id ? { ...n, read: !n.read } : n
      )
    );
    toast({ title: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√¥ng b√°o th√†nh c√¥ng!" });
  };

  const archiveNotification = (id) => {
    setNotifications(notifications.filter((n) => n.id !== id));
    toast({ title: "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ." });
  };
  
  const markAllAsRead = () => {
    setNotifications(notifications.map(n => ({ ...n, read: true })));
    toast({ title: "T·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc." });
  };

  const archiveAll = () => {
    setNotifications([]);
    toast({ title: "T·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ." });
  };


  const unreadCount = notifications.filter(n => !n.read).length;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="space-y-6"
    >
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Trung t√¢m th√¥ng b√°o</h1>
          <p className="text-gray-600 mt-2">
            {unreadCount > 0 ? `B·∫°n c√≥ ${unreadCount} th√¥ng b√°o m·ªõi.` : 'Kh√¥ng c√≥ th√¥ng b√°o m·ªõi.'}
          </p>
        </div>
        <div className="flex flex-wrap gap-2">
          <Button variant="outline" onClick={markAllAsRead} disabled={unreadCount === 0}>
            <MailCheck className="w-4 h-4 mr-2" />
            ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc ({unreadCount})
          </Button>
           <Button variant="outline" onClick={archiveAll} disabled={notifications.length === 0}>
            <Archive className="w-4 h-4 mr-2" />
            L∆∞u tr·ªØ t·∫•t c·∫£
          </Button>
           <Button variant="ghost" size="icon" onClick={() => toast({ title: "üöß T√≠nh nƒÉng ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai", description: "B·∫°n c√≥ th·ªÉ y√™u c·∫ßu t√≠nh nƒÉng n√†y ·ªü l·∫ßn nh·∫Øc ti·∫øp theo! üöÄ" })}>
            <Settings2 className="w-5 h-5" />
          </Button>
        </div>
      </div>

      {notifications.length > 0 ? (
        <div className="space-y-4">
          {notifications.map((notification) => (
            <NotificationItem
              key={notification.id}
              notification={notification}
              onToggleRead={toggleReadStatus}
              onArchive={archiveNotification}
            />
          ))}
        </div>
      ) : (
        <Card>
          <CardContent className="text-center py-16">
            <BellRing className="mx-auto h-16 w-16 text-gray-400 mb-4" />
            <h3 className="text-xl font-semibold text-gray-700">Kh√¥ng c√≥ th√¥ng b√°o n√†o</h3>
            <p className="text-gray-500 mt-2">T·∫•t c·∫£ c√°c th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y.</p>
          </CardContent>
        </Card>
      )}
    </motion.div>
  );
};

export default ParentNotifications;