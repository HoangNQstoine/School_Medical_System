import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CalendarCheck, Bell, HelpCircle, Users2, ChevronDown, CheckCircle, AlertCircle, Clock } from 'lucide-react';
import { toast } from '@/components/ui/use-toast';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

const mockChildren = [
  { id: 'child1', name: 'Nguy·ªÖn VƒÉn An', age: 8 },
  { id: 'child2', name: 'Tr·∫ßn Th·ªã B√¨nh', age: 10 },
];

const mockVaccinationSchedules = {
  child1: [
    { id: 'vac1', name: 'S·ªüi - Quai b·ªã - Rubella (MMR) - M≈©i 2', dueDate: '2025-07-15', status: 'S·∫Øp ƒë·∫øn h·∫°n', notes: 'Ti√™m nh·∫Øc l·∫°i' },
    { id: 'vac2', name: 'Vi√™m n√£o Nh·∫≠t B·∫£n - M≈©i 3', dueDate: '2025-09-01', status: 'S·∫Øp ƒë·∫øn h·∫°n', notes: 'Ti√™m nh·∫Øc l·∫°i' },
    { id: 'vac3', name: 'U·ªën v√°n - B·∫°ch h·∫ßu - Ho g√† (Tdap)', dueDate: '2024-12-10', status: 'ƒê√£ ho√†n th√†nh', notes: '' },
  ],
  child2: [
    { id: 'vac4', name: 'C√∫m m√πa (h√†ng nƒÉm)', dueDate: '2025-10-01', status: 'S·∫Øp ƒë·∫øn h·∫°n', notes: 'Ti√™m ƒë·ªãnh k·ª≥' },
    { id: 'vac5', name: 'HPV (N·ªØ) - M≈©i 1', dueDate: '2025-08-20', status: 'S·∫Øp ƒë·∫øn h·∫°n', notes: 'V·∫Øc xin m·ªõi' },
    { id: 'vac6', name: 'Th·ªßy ƒë·∫≠u - M≈©i 2', dueDate: '2024-11-05', status: 'ƒê√£ ho√†n th√†nh', notes: '' },
  ],
};

const StatusBadge = ({ status }) => {
  let icon;
  let colorClasses;

  switch (status) {
    case 'ƒê√£ ho√†n th√†nh':
      icon = <CheckCircle className="w-3.5 h-3.5 mr-1.5" />;
      colorClasses = 'bg-green-100 text-green-700';
      break;
    case 'S·∫Øp ƒë·∫øn h·∫°n':
      icon = <Clock className="w-3.5 h-3.5 mr-1.5" />;
      colorClasses = 'bg-yellow-100 text-yellow-700';
      break;
    case 'Qu√° h·∫°n':
      icon = <AlertCircle className="w-3.5 h-3.5 mr-1.5" />;
      colorClasses = 'bg-red-100 text-red-700';
      break;
    default:
      icon = <Clock className="w-3.5 h-3.5 mr-1.5" />;
      colorClasses = 'bg-gray-100 text-gray-700';
  }
  return <Badge variant="outline" className={`flex items-center text-xs ${colorClasses}`}>{icon}{status}</Badge>;
};

const ParentVaccinationSchedule = () => {
  const [selectedChildId, setSelectedChildId] = useState(mockChildren[0]?.id || '');
  const schedule = mockVaccinationSchedules[selectedChildId] || [];

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="space-y-6"
    >
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">L·ªãch ti√™m ch·ªßng c·ªßa con</h1>
          <p className="text-gray-600 mt-2">Theo d√µi v√† qu·∫£n l√Ω l·ªãch ti√™m ch·ªßng cho c√°c con.</p>
        </div>
        <div className="flex flex-wrap gap-2 items-center">
          <Select value={selectedChildId} onValueChange={setSelectedChildId}>
            <SelectTrigger className="w-full sm:w-[180px] bg-white">
              <Users2 className="w-4 h-4 mr-2 text-gray-500" />
              <SelectValue placeholder="Ch·ªçn con" />
            </SelectTrigger>
            <SelectContent>
              {mockChildren.map(child => (
                <SelectItem key={child.id} value={child.id}>{child.name}</SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Button className="btn-primary w-full sm:w-auto" onClick={() => toast({ title: "üöß T√≠nh nƒÉng ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai", description: "B·∫°n c√≥ th·ªÉ y√™u c·∫ßu t√≠nh nƒÉng n√†y ·ªü l·∫ßn nh·∫Øc ti·∫øp theo! üöÄ" })}>
            <Bell className="w-4 h-4 mr-2" />
            Nh·∫Øc nh·ªü l·ªãch ti√™m
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <CalendarCheck className="w-5 h-5 mr-2 text-blue-600" />
            L·ªãch tr√¨nh ti√™m ch·ªßng cho {mockChildren.find(c => c.id === selectedChildId)?.name || ''}
          </CardTitle>
          <CardDescription>
            Hi·ªÉn th·ªã c√°c m≈©i ti√™m ƒë√£ ho√†n th√†nh v√† s·∫Øp ƒë·∫øn h·∫°n.
          </CardDescription>
        </CardHeader>
        <CardContent>
          {schedule.length > 0 ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>T√™n v·∫Øc-xin</TableHead>
                  <TableHead>Ng√†y d·ª± ki·∫øn</TableHead>
                  <TableHead>Tr·∫°ng th√°i</TableHead>
                  <TableHead className="hidden md:table-cell">Ghi ch√∫</TableHead>
                  <TableHead className="text-right">H√†nh ƒë·ªông</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {schedule.map((vaccine) => (
                  <TableRow key={vaccine.id}>
                    <TableCell className="font-medium">{vaccine.name}</TableCell>
                    <TableCell>{vaccine.dueDate}</TableCell>
                    <TableCell><StatusBadge status={vaccine.status} /></TableCell>
                    <TableCell className="hidden md:table-cell">{vaccine.notes || 'Kh√¥ng c√≥'}</TableCell>
                    <TableCell className="text-right">
                      <Button variant="outline" size="sm" onClick={() => toast({ title: "üöß T√≠nh nƒÉng ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai", description: `Xem chi ti·∫øt ${vaccine.name}` })}>
                        Chi ti·∫øt
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          ) : (
            <div className="text-center py-12">
              <CalendarCheck className="mx-auto h-16 w-16 text-gray-400 mb-4" />
              <h3 className="text-xl font-semibold text-gray-700">Kh√¥ng c√≥ l·ªãch ti√™m ch·ªßng</h3>
              <p className="text-gray-500 mt-2">Kh√¥ng t√¨m th·∫•y l·ªãch ti√™m ch·ªßng cho {mockChildren.find(c => c.id === selectedChildId)?.name || 'b√© ƒë∆∞·ª£c ch·ªçn'}.</p>
            </div>
          )}
        </CardContent>
      </Card>

      <Card className="bg-blue-50 border-blue-200">
        <CardHeader>
          <CardTitle className="text-blue-700 flex items-center text-lg">
            <HelpCircle className="w-5 h-5 mr-2" />
            Th√¥ng tin h·ªØu √≠ch
          </CardTitle>
        </CardHeader>
        <CardContent className="text-blue-600 text-sm space-y-1">
          <p>Lu√¥n c·∫≠p nh·∫≠t l·ªãch ti√™m ch·ªßng c·ªßa con b·∫°n ƒë·ªÉ ƒë·∫£m b·∫£o s·ª©c kh·ªèe t·ªët nh·∫•t. N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá v·ªõi y t√° h·ªçc ƒë∆∞·ªùng.</p>
          <p>Vi·ªác ti√™m ch·ªßng ƒë·∫ßy ƒë·ªß gi√∫p b·∫£o v·ªá con b·∫°n v√† c·ªông ƒë·ªìng kh·ªèi c√°c b·ªánh truy·ªÅn nhi·ªÖm nguy hi·ªÉm.</p>
          <Button size="sm" variant="link" className="p-0 h-auto text-blue-700 hover:text-blue-800 font-semibold" onClick={() => toast({ title: "üöß T√≠nh nƒÉng ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai", description: "B·∫°n c√≥ th·ªÉ y√™u c·∫ßu t√≠nh nƒÉng n√†y ·ªü l·∫ßn nh·∫Øc ti·∫øp theo! üöÄ" })}>
            T√¨m hi·ªÉu th√™m v·ªÅ c√°c lo·∫°i v·∫Øc-xin
          </Button>
        </CardContent>
      </Card>
    </motion.div>
  );
};

export default ParentVaccinationSchedule;